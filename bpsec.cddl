; This relies on the defintions of BPv7 "bpv7.cddl"

; Generic structure of block-type-specific data for BIB and BCB
ext-data-asb = $ext-data-asb .within ext-data-asb-structure
ext-data-asb-structure = [
  targets: [1* target-block-num],
  context-id: int,
  asb-flags,
  security-source: eid,
  ? parameters: asb-id-value-list, ; if sec-params-present is set
  target-results: [1* asb-id-value-list]
]
target-block-num = uint
asb-flags = uint .bits asb-flag-bits
asb-flag-bits = &(
  sec-params-present: 0
)

; Alternatives can be added to the sockets for each context ID
asb-id-value-list = [1* asb-id-value-pair]
; Interpretation of the pair depends on the context-id and whether
; it is a parameter or a result.
asb-id-value-pair = [
  id: uint,
  value: any
]

; Provide BPv7 extension block types, they both really embed "ext-data-asb" as
; a cbor sequence.
; Block Integrity Block
$extension-block /= extension-block-use<11, bstr .cborseq ext-data-asb>
; Block Confidentiality Block
$extension-block /= extension-block-use<12, bstr .cborseq ext-data-asb>

; Specialization of $ext-data-asb for a security context
; The ParamPair and ResultPair should be sockets for specializing those types.
bpsec-context-use<ContextId, ParamPair, ResultPair> = [
  targets: [
    1* target-block-num
  ],
  context-id: ContextId,
  asb-flags,
  ? security-source: eid,
  ? parameters: [
    1* ParamPair .within asb-id-value-pair
  ],
  target-results: [
    1* [
      1* ResultPair .within asb-id-value-pair
    ]
  ]
]
